// <auto-generated />
using System;
using Competitions.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Competitions.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221007011923_AddActivityPlanTable")]
    partial class AddActivityPlanTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Competitions.Domain.Entities.Places.ActivityPlan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("ActivityPlan");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Meterage")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ParentPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PlaceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentPlaceId");

                    b.HasIndex("PlaceTypeId");

                    b.HasIndex("SupervisorId")
                        .IsUnique();

                    b.ToTable("Place");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceImages", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("PlaceImages");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceSports", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("PlaceId", "SportId");

                    b.HasIndex("SportId");

                    b.ToTable("PlaceSports");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Supervisor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supervisor");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.Coach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CETId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SportId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CETId");

                    b.HasIndex("SportId");

                    b.ToTable("Coach");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.CoachEvidenceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoachEvidenceType");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.Sport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SportTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SportTypeId");

                    b.ToTable("Sport");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.SportType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SportType");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Static.AudienceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AudienceType");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Static.Evidence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Evidence");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.ActivityPlan", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Places.Place", "Place")
                        .WithOne("ActivityPlan")
                        .HasForeignKey("Competitions.Domain.Entities.Places.ActivityPlan", "PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.Document", "File", b1 =>
                        {
                            b1.Property<long>("ActivityPlanId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("File");

                            b1.HasKey("ActivityPlanId");

                            b1.ToTable("ActivityPlan");

                            b1.WithOwner()
                                .HasForeignKey("ActivityPlanId");
                        });

                    b.Navigation("File")
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Place", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Places.Place", "ParentPlace")
                        .WithMany("SubPlaces")
                        .HasForeignKey("ParentPlaceId");

                    b.HasOne("Competitions.Domain.Entities.Places.PlaceType", "PlaceType")
                        .WithMany("Places")
                        .HasForeignKey("PlaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Competitions.Domain.Entities.Places.Supervisor", "Supervisor")
                        .WithOne("Place")
                        .HasForeignKey("Competitions.Domain.Entities.Places.Place", "SupervisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPlace");

                    b.Navigation("PlaceType");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceImages", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Places.Place", "Place")
                        .WithMany("Images")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.Document", "Image", b1 =>
                        {
                            b1.Property<long>("PlaceImagesId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .IsUnicode(false)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Image");

                            b1.HasKey("PlaceImagesId");

                            b1.ToTable("PlaceImages");

                            b1.WithOwner()
                                .HasForeignKey("PlaceImagesId");
                        });

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceSports", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Places.Place", "Place")
                        .WithMany("Sports")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Competitions.Domain.Entities.Sports.Sport", "Sport")
                        .WithMany("Places")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Supervisor", b =>
                {
                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("SupervisorId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .IsUnicode(false)
                                .HasColumnType("varchar(11)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("SupervisorId");

                            b1.ToTable("Supervisor");

                            b1.WithOwner()
                                .HasForeignKey("SupervisorId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.Coach", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Sports.CoachEvidenceType", "CoachEvidenceType")
                        .WithMany("Coaches")
                        .HasForeignKey("CETId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Competitions.Domain.Entities.Sports.Sport", "Sport")
                        .WithMany("Coaches")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<long>("CoachId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("CoachId");

                            b1.ToTable("Coach");

                            b1.WithOwner()
                                .HasForeignKey("CoachId");
                        });

                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.NationalCode", "NationalCode", b1 =>
                        {
                            b1.Property<long>("CoachId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("NationalCode");

                            b1.HasKey("CoachId");

                            b1.ToTable("Coach");

                            b1.WithOwner()
                                .HasForeignKey("CoachId");
                        });

                    b.Navigation("CoachEvidenceType");

                    b.Navigation("NationalCode")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.Sport", b =>
                {
                    b.HasOne("Competitions.Domain.Entities.Sports.SportType", "SportType")
                        .WithMany("Sports")
                        .HasForeignKey("SportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Competitions.SharedKernel.ValueObjects.Document", "Image", b1 =>
                        {
                            b1.Property<long>("SportId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Image");

                            b1.HasKey("SportId");

                            b1.ToTable("Sport");

                            b1.WithOwner()
                                .HasForeignKey("SportId");
                        });

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("SportType");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Place", b =>
                {
                    b.Navigation("ActivityPlan")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Sports");

                    b.Navigation("SubPlaces");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.PlaceType", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Places.Supervisor", b =>
                {
                    b.Navigation("Place")
                        .IsRequired();
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.CoachEvidenceType", b =>
                {
                    b.Navigation("Coaches");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.Sport", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Competitions.Domain.Entities.Sports.SportType", b =>
                {
                    b.Navigation("Sports");
                });
#pragma warning restore 612, 618
        }
    }
}
